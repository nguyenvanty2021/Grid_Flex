.flex_grow {
  display: flex;
  /* flex box cũng có gap */
  gap: 10px;
}
.flex_grow > div {
  background-color: red;
  border: 2px solid blue;
  /* nếu không có flex-grow thì mỗi child là 200px thôi, còn nếu dùng flex-grow thì mỗi child sẽ tối thiểu là 200px (nếu ở thiết bị nhỏ) và mặc định
  nếu còn width thì nó sẽ tự động tăng width mỗi child lên để cho các child lắp đầy toàn màn hình (full width) và vì dùng flex-shrink: 0 nên sẽ xuất hiện scroll ngang
  -> nhưng phải dùng flex-basis thay cho width */
  flex-grow: 1;
  flex-shrink: 0;
  /* nếu dùng flex-box nếu dùng flex-basis thay cho dùng width để dễ xử lý hơn */
  flex-basis: 200px;
}
.flex_grow_v2 {
  margin-top: 1rem;
}
.flex_grow_v2 > div {
  /* cho phép co dãn width theo màn hình. VD: child 200px thì nếu ở device nhỏ sẽ tự động co dãn dưới 200px luôn chứ không cố đỉnh luôn luôn là 200px */
  flex-shrink: 1 !important;
}
.cards {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  /* margin: 10px -20px; */
}
.card {
  border-radius: 20px;
  background-color: red;
  /* width: 25%; */
  width: 320px;
  /* width: calc(350px - 30px); */
  /* margin-left: 30px; */
  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
}
.cards_v2 {
  display: flex;
  /* justify-content: space-between; */
  flex-wrap: wrap;
  /* margin: 10px -20px; */
}
.card_v2 {
  display: flex;
  margin-top: 1rem;
  overflow: hidden;
  flex-direction: column;
  border-radius: 20px;
  /* background-color: red; */
  /* width: 25%; */
  /* width: 350px; */
  margin-left: 30px;
  width: calc(350px - 30px);
  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
}
.content_image {
  height: 200px;
  flex-shrink: 0;
}
.content_top {
  display: flex;
  flex: 1;
  padding: 1rem;
  flex-direction: column;
}
.content_top h3 {
  /* word-break: break-all; */
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  word-break: break-word;
  /* margin-bottom: 1rem; */
}
.content {
  background-color: red;
  display: flex;
  flex-direction: column;
  flex: 1;
}
.content_top_img {
  padding: 1rem 0 0 0 !important;
  background-color: unset !important;
}
.special,
.content_top_img {
  width: 100%;
  background-color: pink;
  display: flex;
  flex-shrink: 0;
  padding: 1rem;
  margin-top: auto;
  align-items: center;
}
.content_top_img img {
  flex-shrink: 0;
}
.content_top_img div {
  flex: 1;
  margin-left: 0.5rem;
}
.special p {
  margin-left: 0.5rem;
}
.card_v2 div img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
  flex-shrink: 0;
}
.card_v2 p {
  flex: 1;
  background-color: blue;
}
/* card_v2:not(:first-child) {
  margin-left: 30px;
} */
.parent {
  padding: 10px;
}
.item span {
  background-color: yellow;
  flex: 1;
}
.item:last-child {
  background-color: green;
}
.itemv {
  background-color: gold;
  border: 1px solid grey;
  min-height: 50px;
}
.container {
  display: grid;
  /* element 1 = 300px, 2 = 100px này là độ dài tuyệt đối */
  /* grid-template-columns: 300px 100px; này là độ dài tuyệt đối */
  /* element 1 = 300px, 2 = 100px, 3 = 200px này là độ dài tuyệt đối */
  /* grid-template-columns: 300px 100px 200px; */
  /* mình sẽ dùng độ dài tương đối, fr = fraction -> 1fr 1fr 1fr = repeat(3, 1fr) */
  grid-template-columns: repeat(3, 1fr);
  /* tương tự columns thì giờ là row */
  /* grid-template-row: 100px 300px 200px; */
  /* hoặc dùng cách này, nhưng cách này là hardcode */
  /* grid-auto-rows: 10px; */
  /* nên dùng cách này flex */
  grid-auto-rows: minmax(50px, auto);
}
.item-5 {
  /* grid-column-start: 2;
  grid-column-end: 4; */
  /* = với lệnh */
  grid-column: 2/4;
  grid-row: 2/4;
}
.item-4 {
  grid-row: 2/5;
}

.containerv2 {
  display: grid;
  /* grid-template-columns: repeat(3, 1fr); */
  grid-template-rows: 100px 1fr 1fr 100px;
  height: 100vh;
  grid-template-areas:
    "header header header"
    "sidebar content content"
    "sidebar comment comment"
    "footer footer footer";
  column-gap: 10px;
  row-gap: 10px;
}
.containerv3 {
  display: grid;
  /* grid-template-columns: repeat(3, 1fr); */
  /* dòng 1 = 300px, dòng 2 = 300px, dòng 3 = 1fr */
  grid-template-rows: 300px 1fr 300px;
  height: 100vh;
  grid-template-areas:
    /* "header header header"
    "sidebar content content"
    "sidebar comment comment"
    "footer footer footer"; */
    "a a b c"
    "d e b c"
    "d e f f";
  column-gap: 10px;
  row-gap: 10px;
}
.item-1v2 {
  grid-area: header;
  height: 100%;
  width: 100%;
  background-color: pink !important;
}
.item-2v2 {
  grid-area: sidebar;
  height: 100%;
  width: 100%;
  background-color: orange !important;
}
.item-3v2 {
  height: 100%;
  width: 100%;
  background-color: red !important;
  grid-area: content;
}
.item-5v2 {
  grid-area: footer;
  height: 100%;
  width: 100%;
  background-color: blue !important;
}
.item-4v2 {
  grid-area: comment;
  height: 100%;
  width: 100%;
  background-color: yellow !important;
}
.grid1 {
  /* padding: 150px; */
  display: grid;
  grid-gap: 30px;
  /* mỗi img min 200px, max 1fr, auto-fill là mỗi element min 200px VD: full màn hình sẽ hiện được 6 element, mà mình chỉ có 4 element
  thì khoảng trống 2 element còn lại là trống, còn nếu mình dùng auto-fit thì vì min là 200px thì nghĩa là từ 200px trở lên nên nó sẽ
  dãn kích thước element ra hay nói cách khác là tăng width element lên sao cho 4 element hiển thị đủ full width luôn -> ưu tiên dùng auto-fit
  design width bao nhiêu thì thay thế width đó cho vị trí 200px
  */
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}
.grid1 img {
  object-fit: contain;
  /* width: 150px; */
  width: 100%;
  height: 100%;
}

@media screen and (max-width: 1023px) {
  .grid1 {
    grid-template-columns: unset;
    grid-auto-flow: column;
    grid-auto-columns: 80%;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scroll-snap-stop: always;
    padding: 25px;
    scroll-padding: 25px;
  }
  .grid1_container {
    /* start or end or center */
    scroll-snap-align: start;
  }
}
.item-1v3 {
  grid-area: a;
  height: 100%;
  width: 100%;
  background-color: pink !important;
}
.item-2v3 {
  grid-area: b;
  height: 100%;
  width: 100%;
  background-color: orange !important;
}
.item-3v3 {
  height: 100%;
  width: 100%;
  background-color: red !important;
  grid-area: c;
}
.item-5v3 {
  grid-area: e;
  height: 100%;
  width: 100%;
  background-color: blue !important;
}
.item-6v3 {
  grid-area: f;
  height: 100%;
  width: 100%;
  background-color: red !important;
}
.item-4v3 {
  grid-area: d;
  height: 100%;
  width: 100%;
  background-color: yellow !important;
}
.item_test {
  display: flex;
  width: 100%;
  border: 1px solid red;
  justify-content: center;
  flex-direction: column;
}
.item_test_image {
  width: 100%;
  object-fit: contain;
  height: 200px;
  flex-shrink: 0;
}
.item_test_content {
  padding: 25px;
  display: flex;
  justify-content: space-between;
  flex-direction: column;
  border: 1px solid red;
  font-weight: 300;
  flex: 1;
}
.parent_test {
  gap: 10px;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: 1fr 1fr;
}
.button {
  display: flex;
  margin: 1rem 0;
}
input {
  /* dãn chiếm hết tất cả khoảng trắng nếu có thể */
  flex-grow: 1;
  /* shrink = 0 thì input nó luôn cố định width = 1000px không co dãn theo device, = 1 sẽ co dãn theo device -> ưu tiên dùng 1 */
  flex-shrink: 1;
  width: 1000px;
}
button {
}
.form {
  margin-bottom: 1rem;
  display: flex;
}
.form label {
  min-width: 90px;
}
.form input {
  flex: 1;
}
.center {
  display: flex;
  width: 100%;
  background-color: red;
  justify-content: space-between;
}
.center1 {
  flex: 1;
}
.center2 {
  flex: 3;
  background-color: yellow;
}
.center3 {
  flex: 1;
}
.center__child {
  text-align: center;
}
.test2 {
  display: flex;
  margin: 30px 0;
  justify-content: space-evenly;
}
.test2 p {
  border: 1px solid blue;
  /* có thể dùng % or px or rem gì cũng được */
  flex-basis: 30%;
  background-color: red;
}
/* cho ra giữa */
.centerv2 {
  background-color: red;
  height: 400px;
  display: flex;
}
/* cho ra giữa */
.centerv2 p {
  margin: auto;
}
